# CONFIGURACIÓN PARA TESTING - Spring Batch Migration Project

# Profile activo
spring.profiles.active=test

# BASE DE DATOS H2 EN MEMORIA (para reemplazar MySQL en tests)
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.datasource.platform=h2


# JPA/HIBERNATE CONFIGURACIÓN PARA TESTS
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.defer-datasource-initialization=true

# H2 CONSOLE (útil para debugging en tests)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# MONGODB CONFIGURACIÓN PARA TESTS (usando MongoDB embebido o test container)
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=test_migration_db
spring.data.mongodb.auto-index-creation=true

# SPRING BATCH CONFIGURACIÓN PARA TESTS
# No ejecutar jobs automáticamente en tests
spring.batch.job.enabled=false
# Inicializar esquema de Spring Batch automáticamente
spring.batch.jdbc.initialize-schema=always
# Usar tablas en memoria para metadatos de Spring Batch
spring.batch.jdbc.table-prefix=BATCH_

# LOGGING CONFIGURACIÓN PARA DEBUGGING
# Nivel de logging general
logging.level.root=INFO

# Logging específico para el proyecto
logging.level.com.batch=DEBUG

# Logging para Spring Batch (útil para debugging)
logging.level.org.springframework.batch=DEBUG

# Logging para MongoDB
logging.level.org.springframework.data.mongodb=DEBUG

# Logging para JPA/Hibernate
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Logging para transacciones
logging.level.org.springframework.transaction=DEBUG

# Formato de logging
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %level - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ACTUATOR PARA HEALTH CHECKS EN TESTS
management.endpoints.web.exposure.include=health,info,metrics,beans,env
management.endpoint.health.show-details=always
management.health.db.enabled=true
management.health.mongo.enabled=true

# CONFIGURACIÓN DE SERVIDOR PARA TESTS
server.port=8080
server.servlet.context-path=/

# CONFIGURACIÓN ESPECÍFICA PARA TESTS DE SPRING BATCH
# Tamaño de chunk pequeño para tests rápidos
batch.chunk.size=5

# Timeout para jobs en tests (en milisegundos)
batch.job.timeout=30000

# CONFIGURACIÓN DE JACKSON PARA SERIALIZACIÓN JSON EN TESTS
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=UTC

# CONFIGURACIÓN ADICIONAL PARA TESTING
# Evitar cache en tests
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false

# Configuración de pool de conexiones para tests
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=20000

# SWAGGER/OPENAPI CONFIGURACIÓN PARA TESTS
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true